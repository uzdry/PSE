IComponent diagram 2

@startuml 

abstract class  Message << serializable, Product >> {
	-topic: Topic
}

class ValueMessage << ConcreteProduct >> extends Message {
	-value: Value
}

class StatisticMessage << ConcreteProduct >> extends Message {
	-statistic: Statistic
}

class PathMessage << ConcreteProduct >> extends Message {
	-curve1: List of Vec2
	-curve2: List of Vec2
}

class ConfigRequestMessage << ConcreteProduct >> extends Message {
	-configRequest: ConfigRequest
}

class DBRequestMessage << ConcreteProduct >> extends Message {
	-DBRequest: ConfigRequest
}

class SettingsMessage << ConcreteProduct >> extends Message {
	-Map<Topic, Value>
}

class ConfigRequest {
	-List<ConfigFileEntry>
}

class DBRequest {
	-topic: Topic
	-onCurrentDriver: Boolean
	+getQuery(): Query
}

class DBReqRecent extends DBRequest {
	-numberRecentEntries: int
}

class DBReqFrom extends DBRequest {
	-startDate: Date
}

class DBReqRange extends DBRequest {
	-startDate: Date
	-endDate: Date
}

abstract class BusDevice << creator >>{
	+publish(message: Message): Boolean
	+{abstract}handleMessage(message: Message)
	+subscribe(object: BusDevice, topic: Topic): Boolean
	+unsubscribe(object: BusDevice, topic: Topic): Boolean
	-createMessage(): Message
}

class Broker {
	+getSubscribers(topic: Topic): List of BusDevice
	+getSubscriptions(object: BusDevice): List of Topic
	+subscribe(object: BusDevice, topic: Topic): Boolean
	+unsubscribe(object: BusDevice, topic: Topic): Boolean
}

class Subscription {
	-subscriber: BusDevice
	-subscribedTopic: Topic
}

class MessageBus {
	+subscribe(object: BusDevice, topic: Topic)
	+unsubscribe(object: BusDevice, topic: Topic)
	+handleMessage(message: Message)
	-distribute(message: Message)
}

MessageBus *--"1" Broker
MessageBus o--"0..n" Message
MessageBus o--"0..n" BusDevice 
MessageBus "1"--* BusDevice
Broker *--"0..n" Subscription
BusDevice o--"0..n" Message

@enduml