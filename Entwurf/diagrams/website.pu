@startuml

class Proxy{
	
}

class Collection{
	+add( :DataModel)
	+remove( :DataModel)
	+get(id: String)
	. . . 
}

class DataModel <<Serializable>>{
	+id: String
	+name: String
	-data: List of values
	bind(event: String)
}

abstract class View{
	{abstract} render()
}

class Frame{

}

class Dashboard <<Serializable>> implements View {
	+render()
	
}


class WidgetFactory{
	-widgetPrototypes: List with Widgets
	+createWidget(WidgetPrototypeID: String, DataStreamID: String)
	+addWidgetPrototype( :Widget ) 
}

abstract class Widget <<Serializable>> implements View{
	{abstract} +sizes: List of vertices
	{abstract} +widgetPrototypeID: String
	{abstract} +widgetName
}



Dashboard o-- WidgetFactory
WidgetFactory --> Widget: <<creates>>


Collection o-- "*" DataModel
Dashboard o-- "*" Widget
View o-- DataModel
View o-- Collection
Proxy o-- Collection

Frame o-- Dashboard

@enduml